// Generated by gencpp from file edo_core_msgs/JointControlArray.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_JOINTCONTROLARRAY_H
#define EDO_CORE_MSGS_MESSAGE_JOINTCONTROLARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <edo_core_msgs/JointControl.h>

namespace edo_core_msgs
{
template <class ContainerAllocator>
struct JointControlArray_
{
  typedef JointControlArray_<ContainerAllocator> Type;

  JointControlArray_()
    : size(0)
    , joints()  {
    }
  JointControlArray_(const ContainerAllocator& _alloc)
    : size(0)
    , joints(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _size_type;
  _size_type size;

   typedef std::vector< ::edo_core_msgs::JointControl_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::edo_core_msgs::JointControl_<ContainerAllocator> >::other >  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::edo_core_msgs::JointControlArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::JointControlArray_<ContainerAllocator> const> ConstPtr;

}; // struct JointControlArray_

typedef ::edo_core_msgs::JointControlArray_<std::allocator<void> > JointControlArray;

typedef boost::shared_ptr< ::edo_core_msgs::JointControlArray > JointControlArrayPtr;
typedef boost::shared_ptr< ::edo_core_msgs::JointControlArray const> JointControlArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::JointControlArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::JointControlArray_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointControlArray_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size &&
    lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::JointControlArray_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointControlArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointControlArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointControlArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointControlArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beebf50890342f3788d239a741cfb503";
  }

  static const char* value(const ::edo_core_msgs::JointControlArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbeebf50890342f37ULL;
  static const uint64_t static_value2 = 0x88d239a741cfb503ULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/JointControlArray";
  }

  static const char* value(const ::edo_core_msgs::JointControlArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 size\n"
"edo_core_msgs/JointControl[] joints\n"
"\n"
"================================================================================\n"
"MSG: edo_core_msgs/JointControl\n"
"float32 position\n"
"float32 velocity\n"
"float32 current\n"
"float32 ff_velocity\n"
"float32 ff_current\n"
"float32 R_rasp\n"
;
  }

  static const char* value(const ::edo_core_msgs::JointControlArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControlArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::JointControlArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::JointControlArray_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.size);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::edo_core_msgs::JointControl_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_JOINTCONTROLARRAY_H
