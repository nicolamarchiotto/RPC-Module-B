// Generated by gencpp from file edo_core_msgs/MovementCommand.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_MOVEMENTCOMMAND_H
#define EDO_CORE_MSGS_MESSAGE_MOVEMENTCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <edo_core_msgs/Point.h>
#include <edo_core_msgs/Point.h>
#include <edo_core_msgs/Frame.h>
#include <edo_core_msgs/Frame.h>
#include <edo_core_msgs/Payload.h>

namespace edo_core_msgs
{
template <class ContainerAllocator>
struct MovementCommand_
{
  typedef MovementCommand_<ContainerAllocator> Type;

  MovementCommand_()
    : move_command(0)
    , move_type(0)
    , ovr(0)
    , delay(0)
    , remote_tool(0)
    , cartesian_linear_speed(0.0)
    , target()
    , via()
    , tool()
    , frame()
    , payload()  {
    }
  MovementCommand_(const ContainerAllocator& _alloc)
    : move_command(0)
    , move_type(0)
    , ovr(0)
    , delay(0)
    , remote_tool(0)
    , cartesian_linear_speed(0.0)
    , target(_alloc)
    , via(_alloc)
    , tool(_alloc)
    , frame(_alloc)
    , payload(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _move_command_type;
  _move_command_type move_command;

   typedef uint8_t _move_type_type;
  _move_type_type move_type;

   typedef uint8_t _ovr_type;
  _ovr_type ovr;

   typedef uint8_t _delay_type;
  _delay_type delay;

   typedef uint8_t _remote_tool_type;
  _remote_tool_type remote_tool;

   typedef float _cartesian_linear_speed_type;
  _cartesian_linear_speed_type cartesian_linear_speed;

   typedef  ::edo_core_msgs::Point_<ContainerAllocator>  _target_type;
  _target_type target;

   typedef  ::edo_core_msgs::Point_<ContainerAllocator>  _via_type;
  _via_type via;

   typedef  ::edo_core_msgs::Frame_<ContainerAllocator>  _tool_type;
  _tool_type tool;

   typedef  ::edo_core_msgs::Frame_<ContainerAllocator>  _frame_type;
  _frame_type frame;

   typedef  ::edo_core_msgs::Payload_<ContainerAllocator>  _payload_type;
  _payload_type payload;





  typedef boost::shared_ptr< ::edo_core_msgs::MovementCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::MovementCommand_<ContainerAllocator> const> ConstPtr;

}; // struct MovementCommand_

typedef ::edo_core_msgs::MovementCommand_<std::allocator<void> > MovementCommand;

typedef boost::shared_ptr< ::edo_core_msgs::MovementCommand > MovementCommandPtr;
typedef boost::shared_ptr< ::edo_core_msgs::MovementCommand const> MovementCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::MovementCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::MovementCommand_<ContainerAllocator1> & lhs, const ::edo_core_msgs::MovementCommand_<ContainerAllocator2> & rhs)
{
  return lhs.move_command == rhs.move_command &&
    lhs.move_type == rhs.move_type &&
    lhs.ovr == rhs.ovr &&
    lhs.delay == rhs.delay &&
    lhs.remote_tool == rhs.remote_tool &&
    lhs.cartesian_linear_speed == rhs.cartesian_linear_speed &&
    lhs.target == rhs.target &&
    lhs.via == rhs.via &&
    lhs.tool == rhs.tool &&
    lhs.frame == rhs.frame &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::MovementCommand_<ContainerAllocator1> & lhs, const ::edo_core_msgs::MovementCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::MovementCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::MovementCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::MovementCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ce327fbfa5ad8bcb0553e05c183b0f4";
  }

  static const char* value(const ::edo_core_msgs::MovementCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ce327fbfa5ad8bcULL;
  static const uint64_t static_value2 = 0xb0553e05c183b0f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/MovementCommand";
  }

  static const char* value(const ::edo_core_msgs::MovementCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 move_command\n"
"uint8 move_type\n"
"uint8 ovr\n"
"uint8 delay\n"
"uint8 remote_tool\n"
"float32 cartesian_linear_speed\n"
"edo_core_msgs/Point target\n"
"edo_core_msgs/Point via\n"
"edo_core_msgs/Frame tool\n"
"edo_core_msgs/Frame frame\n"
"edo_core_msgs/Payload payload\n"
"================================================================================\n"
"MSG: edo_core_msgs/Point\n"
"uint8 data_type\n"
"edo_core_msgs/CartesianPose cartesian_data\n"
"uint64 joints_mask\n"
"float32[] joints_data\n"
"================================================================================\n"
"MSG: edo_core_msgs/CartesianPose\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 a\n"
"float32 e\n"
"float32 r\n"
"string config_flags\n"
"\n"
"================================================================================\n"
"MSG: edo_core_msgs/Frame\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 a\n"
"float32 e\n"
"float32 r\n"
"================================================================================\n"
"MSG: edo_core_msgs/Payload\n"
"float32 mass\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 xx\n"
"float32 yy\n"
"float32 zz\n"
"float32 xy\n"
"float32 xz\n"
"float32 yz\n"
;
  }

  static const char* value(const ::edo_core_msgs::MovementCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_command);
      stream.next(m.move_type);
      stream.next(m.ovr);
      stream.next(m.delay);
      stream.next(m.remote_tool);
      stream.next(m.cartesian_linear_speed);
      stream.next(m.target);
      stream.next(m.via);
      stream.next(m.tool);
      stream.next(m.frame);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovementCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::MovementCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::MovementCommand_<ContainerAllocator>& v)
  {
    s << indent << "move_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_command);
    s << indent << "move_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_type);
    s << indent << "ovr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ovr);
    s << indent << "delay: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.delay);
    s << indent << "remote_tool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remote_tool);
    s << indent << "cartesian_linear_speed: ";
    Printer<float>::stream(s, indent + "  ", v.cartesian_linear_speed);
    s << indent << "target: ";
    s << std::endl;
    Printer< ::edo_core_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "via: ";
    s << std::endl;
    Printer< ::edo_core_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.via);
    s << indent << "tool: ";
    s << std::endl;
    Printer< ::edo_core_msgs::Frame_<ContainerAllocator> >::stream(s, indent + "  ", v.tool);
    s << indent << "frame: ";
    s << std::endl;
    Printer< ::edo_core_msgs::Frame_<ContainerAllocator> >::stream(s, indent + "  ", v.frame);
    s << indent << "payload: ";
    s << std::endl;
    Printer< ::edo_core_msgs::Payload_<ContainerAllocator> >::stream(s, indent + "  ", v.payload);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_MOVEMENTCOMMAND_H
