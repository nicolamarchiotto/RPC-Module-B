// Generated by gencpp from file edo_core_msgs/JointConfiguration.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_JOINTCONFIGURATION_H
#define EDO_CORE_MSGS_MESSAGE_JOINTCONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace edo_core_msgs
{
template <class ContainerAllocator>
struct JointConfiguration_
{
  typedef JointConfiguration_<ContainerAllocator> Type;

  JointConfiguration_()
    : kp(0.0)
    , ti(0.0)
    , td(0.0)
    , sat(0.0)
    , kff(0.0)
    , max(0.0)
    , kpv(0.0)
    , tiv(0.0)
    , tdv(0.0)
    , satv(0.0)
    , kffv(0.0)
    , maxv(0.0)
    , kpt(0.0)
    , tit(0.0)
    , tdt(0.0)
    , satt(0.0)
    , kfft(0.0)
    , maxt(0.0)
    , kt(0.0)  {
    }
  JointConfiguration_(const ContainerAllocator& _alloc)
    : kp(0.0)
    , ti(0.0)
    , td(0.0)
    , sat(0.0)
    , kff(0.0)
    , max(0.0)
    , kpv(0.0)
    , tiv(0.0)
    , tdv(0.0)
    , satv(0.0)
    , kffv(0.0)
    , maxv(0.0)
    , kpt(0.0)
    , tit(0.0)
    , tdt(0.0)
    , satt(0.0)
    , kfft(0.0)
    , maxt(0.0)
    , kt(0.0)  {
  (void)_alloc;
    }



   typedef float _kp_type;
  _kp_type kp;

   typedef float _ti_type;
  _ti_type ti;

   typedef float _td_type;
  _td_type td;

   typedef float _sat_type;
  _sat_type sat;

   typedef float _kff_type;
  _kff_type kff;

   typedef float _max_type;
  _max_type max;

   typedef float _kpv_type;
  _kpv_type kpv;

   typedef float _tiv_type;
  _tiv_type tiv;

   typedef float _tdv_type;
  _tdv_type tdv;

   typedef float _satv_type;
  _satv_type satv;

   typedef float _kffv_type;
  _kffv_type kffv;

   typedef float _maxv_type;
  _maxv_type maxv;

   typedef float _kpt_type;
  _kpt_type kpt;

   typedef float _tit_type;
  _tit_type tit;

   typedef float _tdt_type;
  _tdt_type tdt;

   typedef float _satt_type;
  _satt_type satt;

   typedef float _kfft_type;
  _kfft_type kfft;

   typedef float _maxt_type;
  _maxt_type maxt;

   typedef float _kt_type;
  _kt_type kt;





  typedef boost::shared_ptr< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> const> ConstPtr;

}; // struct JointConfiguration_

typedef ::edo_core_msgs::JointConfiguration_<std::allocator<void> > JointConfiguration;

typedef boost::shared_ptr< ::edo_core_msgs::JointConfiguration > JointConfigurationPtr;
typedef boost::shared_ptr< ::edo_core_msgs::JointConfiguration const> JointConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::JointConfiguration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::JointConfiguration_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointConfiguration_<ContainerAllocator2> & rhs)
{
  return lhs.kp == rhs.kp &&
    lhs.ti == rhs.ti &&
    lhs.td == rhs.td &&
    lhs.sat == rhs.sat &&
    lhs.kff == rhs.kff &&
    lhs.max == rhs.max &&
    lhs.kpv == rhs.kpv &&
    lhs.tiv == rhs.tiv &&
    lhs.tdv == rhs.tdv &&
    lhs.satv == rhs.satv &&
    lhs.kffv == rhs.kffv &&
    lhs.maxv == rhs.maxv &&
    lhs.kpt == rhs.kpt &&
    lhs.tit == rhs.tit &&
    lhs.tdt == rhs.tdt &&
    lhs.satt == rhs.satt &&
    lhs.kfft == rhs.kfft &&
    lhs.maxt == rhs.maxt &&
    lhs.kt == rhs.kt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::JointConfiguration_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointConfiguration_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53d67f707da52f98419b61a5961787e9";
  }

  static const char* value(const ::edo_core_msgs::JointConfiguration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53d67f707da52f98ULL;
  static const uint64_t static_value2 = 0x419b61a5961787e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/JointConfiguration";
  }

  static const char* value(const ::edo_core_msgs::JointConfiguration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 kp\n"
"float32 ti\n"
"float32 td\n"
"float32 sat\n"
"float32 kff\n"
"float32 max\n"
"float32 kpv\n"
"float32 tiv\n"
"float32 tdv\n"
"float32 satv\n"
"float32 kffv\n"
"float32 maxv\n"
"float32 kpt\n"
"float32 tit\n"
"float32 tdt\n"
"float32 satt\n"
"float32 kfft\n"
"float32 maxt\n"
"float32 kt\n"
;
  }

  static const char* value(const ::edo_core_msgs::JointConfiguration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kp);
      stream.next(m.ti);
      stream.next(m.td);
      stream.next(m.sat);
      stream.next(m.kff);
      stream.next(m.max);
      stream.next(m.kpv);
      stream.next(m.tiv);
      stream.next(m.tdv);
      stream.next(m.satv);
      stream.next(m.kffv);
      stream.next(m.maxv);
      stream.next(m.kpt);
      stream.next(m.tit);
      stream.next(m.tdt);
      stream.next(m.satt);
      stream.next(m.kfft);
      stream.next(m.maxt);
      stream.next(m.kt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointConfiguration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::JointConfiguration_<ContainerAllocator>& v)
  {
    s << indent << "kp: ";
    Printer<float>::stream(s, indent + "  ", v.kp);
    s << indent << "ti: ";
    Printer<float>::stream(s, indent + "  ", v.ti);
    s << indent << "td: ";
    Printer<float>::stream(s, indent + "  ", v.td);
    s << indent << "sat: ";
    Printer<float>::stream(s, indent + "  ", v.sat);
    s << indent << "kff: ";
    Printer<float>::stream(s, indent + "  ", v.kff);
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
    s << indent << "kpv: ";
    Printer<float>::stream(s, indent + "  ", v.kpv);
    s << indent << "tiv: ";
    Printer<float>::stream(s, indent + "  ", v.tiv);
    s << indent << "tdv: ";
    Printer<float>::stream(s, indent + "  ", v.tdv);
    s << indent << "satv: ";
    Printer<float>::stream(s, indent + "  ", v.satv);
    s << indent << "kffv: ";
    Printer<float>::stream(s, indent + "  ", v.kffv);
    s << indent << "maxv: ";
    Printer<float>::stream(s, indent + "  ", v.maxv);
    s << indent << "kpt: ";
    Printer<float>::stream(s, indent + "  ", v.kpt);
    s << indent << "tit: ";
    Printer<float>::stream(s, indent + "  ", v.tit);
    s << indent << "tdt: ";
    Printer<float>::stream(s, indent + "  ", v.tdt);
    s << indent << "satt: ";
    Printer<float>::stream(s, indent + "  ", v.satt);
    s << indent << "kfft: ";
    Printer<float>::stream(s, indent + "  ", v.kfft);
    s << indent << "maxt: ";
    Printer<float>::stream(s, indent + "  ", v.maxt);
    s << indent << "kt: ";
    Printer<float>::stream(s, indent + "  ", v.kt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_JOINTCONFIGURATION_H
