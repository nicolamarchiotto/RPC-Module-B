// Generated by gencpp from file edo_core_msgs/JointConfigurationArray.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_JOINTCONFIGURATIONARRAY_H
#define EDO_CORE_MSGS_MESSAGE_JOINTCONFIGURATIONARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <edo_core_msgs/JointConfiguration.h>

namespace edo_core_msgs
{
template <class ContainerAllocator>
struct JointConfigurationArray_
{
  typedef JointConfigurationArray_<ContainerAllocator> Type;

  JointConfigurationArray_()
    : joints_mask(0)
    , joints()  {
    }
  JointConfigurationArray_(const ContainerAllocator& _alloc)
    : joints_mask(0)
    , joints(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _joints_mask_type;
  _joints_mask_type joints_mask;

   typedef std::vector< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >::other >  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> const> ConstPtr;

}; // struct JointConfigurationArray_

typedef ::edo_core_msgs::JointConfigurationArray_<std::allocator<void> > JointConfigurationArray;

typedef boost::shared_ptr< ::edo_core_msgs::JointConfigurationArray > JointConfigurationArrayPtr;
typedef boost::shared_ptr< ::edo_core_msgs::JointConfigurationArray const> JointConfigurationArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator2> & rhs)
{
  return lhs.joints_mask == rhs.joints_mask &&
    lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecfe2e24742d3b217f7dea8ef1addc54";
  }

  static const char* value(const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecfe2e24742d3b21ULL;
  static const uint64_t static_value2 = 0x7f7dea8ef1addc54ULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/JointConfigurationArray";
  }

  static const char* value(const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 joints_mask\n"
"edo_core_msgs/JointConfiguration[] joints\n"
"\n"
"================================================================================\n"
"MSG: edo_core_msgs/JointConfiguration\n"
"float32 kp\n"
"float32 ti\n"
"float32 td\n"
"float32 sat\n"
"float32 kff\n"
"float32 max\n"
"float32 kpv\n"
"float32 tiv\n"
"float32 tdv\n"
"float32 satv\n"
"float32 kffv\n"
"float32 maxv\n"
"float32 kpt\n"
"float32 tit\n"
"float32 tdt\n"
"float32 satt\n"
"float32 kfft\n"
"float32 maxt\n"
"float32 kt\n"
;
  }

  static const char* value(const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints_mask);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointConfigurationArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::JointConfigurationArray_<ContainerAllocator>& v)
  {
    s << indent << "joints_mask: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.joints_mask);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::edo_core_msgs::JointConfiguration_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_JOINTCONFIGURATIONARRAY_H
