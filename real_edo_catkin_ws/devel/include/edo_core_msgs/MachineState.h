// Generated by gencpp from file edo_core_msgs/MachineState.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_MACHINESTATE_H
#define EDO_CORE_MSGS_MESSAGE_MACHINESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace edo_core_msgs
{
template <class ContainerAllocator>
struct MachineState_
{
  typedef MachineState_<ContainerAllocator> Type;

  MachineState_()
    : current_state(0)
    , opcode(0)  {
    }
  MachineState_(const ContainerAllocator& _alloc)
    : current_state(0)
    , opcode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _current_state_type;
  _current_state_type current_state;

   typedef uint32_t _opcode_type;
  _opcode_type opcode;





  typedef boost::shared_ptr< ::edo_core_msgs::MachineState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::MachineState_<ContainerAllocator> const> ConstPtr;

}; // struct MachineState_

typedef ::edo_core_msgs::MachineState_<std::allocator<void> > MachineState;

typedef boost::shared_ptr< ::edo_core_msgs::MachineState > MachineStatePtr;
typedef boost::shared_ptr< ::edo_core_msgs::MachineState const> MachineStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::MachineState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::MachineState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::MachineState_<ContainerAllocator1> & lhs, const ::edo_core_msgs::MachineState_<ContainerAllocator2> & rhs)
{
  return lhs.current_state == rhs.current_state &&
    lhs.opcode == rhs.opcode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::MachineState_<ContainerAllocator1> & lhs, const ::edo_core_msgs::MachineState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::MachineState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::MachineState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::MachineState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::MachineState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::MachineState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::MachineState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::MachineState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4f14e54aff5d5e1b86fe2e574bdd582";
  }

  static const char* value(const ::edo_core_msgs::MachineState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4f14e54aff5d5e1ULL;
  static const uint64_t static_value2 = 0xb86fe2e574bdd582ULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::MachineState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/MachineState";
  }

  static const char* value(const ::edo_core_msgs::MachineState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::MachineState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 current_state\n"
"uint32 opcode\n"
;
  }

  static const char* value(const ::edo_core_msgs::MachineState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::MachineState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_state);
      stream.next(m.opcode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MachineState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::MachineState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::MachineState_<ContainerAllocator>& v)
  {
    s << indent << "current_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_state);
    s << indent << "opcode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.opcode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_MACHINESTATE_H
