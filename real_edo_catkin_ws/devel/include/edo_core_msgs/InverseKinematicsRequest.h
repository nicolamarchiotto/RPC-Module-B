// Generated by gencpp from file edo_core_msgs/InverseKinematicsRequest.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_INVERSEKINEMATICSREQUEST_H
#define EDO_CORE_MSGS_MESSAGE_INVERSEKINEMATICSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <edo_core_msgs/CartesianPose.h>

namespace edo_core_msgs
{
template <class ContainerAllocator>
struct InverseKinematicsRequest_
{
  typedef InverseKinematicsRequest_<ContainerAllocator> Type;

  InverseKinematicsRequest_()
    : cartesian_pose()  {
    }
  InverseKinematicsRequest_(const ContainerAllocator& _alloc)
    : cartesian_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::edo_core_msgs::CartesianPose_<ContainerAllocator>  _cartesian_pose_type;
  _cartesian_pose_type cartesian_pose;





  typedef boost::shared_ptr< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InverseKinematicsRequest_

typedef ::edo_core_msgs::InverseKinematicsRequest_<std::allocator<void> > InverseKinematicsRequest;

typedef boost::shared_ptr< ::edo_core_msgs::InverseKinematicsRequest > InverseKinematicsRequestPtr;
typedef boost::shared_ptr< ::edo_core_msgs::InverseKinematicsRequest const> InverseKinematicsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator1> & lhs, const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cartesian_pose == rhs.cartesian_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator1> & lhs, const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "248b3f99d2c1f29abd1e4abaa382260d";
  }

  static const char* value(const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x248b3f99d2c1f29aULL;
  static const uint64_t static_value2 = 0xbd1e4abaa382260dULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/InverseKinematicsRequest";
  }

  static const char* value(const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/CartesianPose cartesian_pose\n"
"\n"
"================================================================================\n"
"MSG: edo_core_msgs/CartesianPose\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 a\n"
"float32 e\n"
"float32 r\n"
"string config_flags\n"
;
  }

  static const char* value(const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cartesian_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InverseKinematicsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::InverseKinematicsRequest_<ContainerAllocator>& v)
  {
    s << indent << "cartesian_pose: ";
    s << std::endl;
    Printer< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >::stream(s, indent + "  ", v.cartesian_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_INVERSEKINEMATICSREQUEST_H
