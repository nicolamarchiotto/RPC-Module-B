// Generated by gencpp from file edo_core_msgs/SoftwareVersionResponse.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_SOFTWAREVERSIONRESPONSE_H
#define EDO_CORE_MSGS_MESSAGE_SOFTWAREVERSIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <edo_core_msgs/NodeSwVersionArray.h>

namespace edo_core_msgs
{
template <class ContainerAllocator>
struct SoftwareVersionResponse_
{
  typedef SoftwareVersionResponse_<ContainerAllocator> Type;

  SoftwareVersionResponse_()
    : version()
    , tool_id(0)  {
    }
  SoftwareVersionResponse_(const ContainerAllocator& _alloc)
    : version(_alloc)
    , tool_id(0)  {
  (void)_alloc;
    }



   typedef  ::edo_core_msgs::NodeSwVersionArray_<ContainerAllocator>  _version_type;
  _version_type version;

   typedef int8_t _tool_id_type;
  _tool_id_type tool_id;





  typedef boost::shared_ptr< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SoftwareVersionResponse_

typedef ::edo_core_msgs::SoftwareVersionResponse_<std::allocator<void> > SoftwareVersionResponse;

typedef boost::shared_ptr< ::edo_core_msgs::SoftwareVersionResponse > SoftwareVersionResponsePtr;
typedef boost::shared_ptr< ::edo_core_msgs::SoftwareVersionResponse const> SoftwareVersionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator1> & lhs, const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.version == rhs.version &&
    lhs.tool_id == rhs.tool_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator1> & lhs, const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ff7e59c12389d7d0696ad614636e35e";
  }

  static const char* value(const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ff7e59c12389d7dULL;
  static const uint64_t static_value2 = 0x0696ad614636e35eULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/SoftwareVersionResponse";
  }

  static const char* value(const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/NodeSwVersionArray version\n"
"int8 tool_id\n"
"\n"
"================================================================================\n"
"MSG: edo_core_msgs/NodeSwVersionArray\n"
"edo_core_msgs/NodeSwVersion[] nodes\n"
"\n"
"================================================================================\n"
"MSG: edo_core_msgs/NodeSwVersion\n"
"uint16 id\n"
"string version\n"
;
  }

  static const char* value(const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version);
      stream.next(m.tool_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoftwareVersionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::SoftwareVersionResponse_<ContainerAllocator>& v)
  {
    s << indent << "version: ";
    s << std::endl;
    Printer< ::edo_core_msgs::NodeSwVersionArray_<ContainerAllocator> >::stream(s, indent + "  ", v.version);
    s << indent << "tool_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tool_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_SOFTWAREVERSIONRESPONSE_H
