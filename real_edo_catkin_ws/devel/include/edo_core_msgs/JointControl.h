// Generated by gencpp from file edo_core_msgs/JointControl.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_JOINTCONTROL_H
#define EDO_CORE_MSGS_MESSAGE_JOINTCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace edo_core_msgs
{
template <class ContainerAllocator>
struct JointControl_
{
  typedef JointControl_<ContainerAllocator> Type;

  JointControl_()
    : position(0.0)
    , velocity(0.0)
    , current(0.0)
    , ff_velocity(0.0)
    , ff_current(0.0)
    , R_rasp(0.0)  {
    }
  JointControl_(const ContainerAllocator& _alloc)
    : position(0.0)
    , velocity(0.0)
    , current(0.0)
    , ff_velocity(0.0)
    , ff_current(0.0)
    , R_rasp(0.0)  {
  (void)_alloc;
    }



   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _current_type;
  _current_type current;

   typedef float _ff_velocity_type;
  _ff_velocity_type ff_velocity;

   typedef float _ff_current_type;
  _ff_current_type ff_current;

   typedef float _R_rasp_type;
  _R_rasp_type R_rasp;





  typedef boost::shared_ptr< ::edo_core_msgs::JointControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::JointControl_<ContainerAllocator> const> ConstPtr;

}; // struct JointControl_

typedef ::edo_core_msgs::JointControl_<std::allocator<void> > JointControl;

typedef boost::shared_ptr< ::edo_core_msgs::JointControl > JointControlPtr;
typedef boost::shared_ptr< ::edo_core_msgs::JointControl const> JointControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::JointControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::JointControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::JointControl_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointControl_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.current == rhs.current &&
    lhs.ff_velocity == rhs.ff_velocity &&
    lhs.ff_current == rhs.ff_current &&
    lhs.R_rasp == rhs.R_rasp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::JointControl_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::JointControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7ea2ff52846d3da7658c7349ad8692b";
  }

  static const char* value(const ::edo_core_msgs::JointControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7ea2ff52846d3daULL;
  static const uint64_t static_value2 = 0x7658c7349ad8692bULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::JointControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/JointControl";
  }

  static const char* value(const ::edo_core_msgs::JointControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::JointControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position\n"
"float32 velocity\n"
"float32 current\n"
"float32 ff_velocity\n"
"float32 ff_current\n"
"float32 R_rasp\n"
;
  }

  static const char* value(const ::edo_core_msgs::JointControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::JointControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.current);
      stream.next(m.ff_velocity);
      stream.next(m.ff_current);
      stream.next(m.R_rasp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::JointControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::JointControl_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "ff_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.ff_velocity);
    s << indent << "ff_current: ";
    Printer<float>::stream(s, indent + "  ", v.ff_current);
    s << indent << "R_rasp: ";
    Printer<float>::stream(s, indent + "  ", v.R_rasp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_JOINTCONTROL_H
