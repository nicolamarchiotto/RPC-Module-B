// Generated by gencpp from file edo_core_msgs/JointState.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_JOINTSTATE_H
#define EDO_CORE_MSGS_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace edo_core_msgs
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : position(0.0)
    , velocity(0.0)
    , current(0.0)
    , commandFlag(0)
    , R_jnt(0.0)  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : position(0.0)
    , velocity(0.0)
    , current(0.0)
    , commandFlag(0)
    , R_jnt(0.0)  {
  (void)_alloc;
    }



   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _current_type;
  _current_type current;

   typedef uint16_t _commandFlag_type;
  _commandFlag_type commandFlag;

   typedef float _R_jnt_type;
  _R_jnt_type R_jnt;





  typedef boost::shared_ptr< ::edo_core_msgs::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::edo_core_msgs::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::edo_core_msgs::JointState > JointStatePtr;
typedef boost::shared_ptr< ::edo_core_msgs::JointState const> JointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::JointState_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.current == rhs.current &&
    lhs.commandFlag == rhs.commandFlag &&
    lhs.R_jnt == rhs.R_jnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::JointState_<ContainerAllocator1> & lhs, const ::edo_core_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fedfea168496dd2f0cbb7b111adbfdfe";
  }

  static const char* value(const ::edo_core_msgs::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfedfea168496dd2fULL;
  static const uint64_t static_value2 = 0x0cbb7b111adbfdfeULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/JointState";
  }

  static const char* value(const ::edo_core_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position\n"
"float32 velocity\n"
"float32 current\n"
"uint16 commandFlag\n"
"float32 R_jnt\n"
;
  }

  static const char* value(const ::edo_core_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.current);
      stream.next(m.commandFlag);
      stream.next(m.R_jnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::JointState_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "commandFlag: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.commandFlag);
    s << indent << "R_jnt: ";
    Printer<float>::stream(s, indent + "  ", v.R_jnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_JOINTSTATE_H
