// Generated by gencpp from file edo_core_msgs/CartesianPose.msg
// DO NOT EDIT!


#ifndef EDO_CORE_MSGS_MESSAGE_CARTESIANPOSE_H
#define EDO_CORE_MSGS_MESSAGE_CARTESIANPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace edo_core_msgs
{
template <class ContainerAllocator>
struct CartesianPose_
{
  typedef CartesianPose_<ContainerAllocator> Type;

  CartesianPose_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , a(0.0)
    , e(0.0)
    , r(0.0)
    , config_flags()  {
    }
  CartesianPose_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , a(0.0)
    , e(0.0)
    , r(0.0)
    , config_flags(_alloc)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _a_type;
  _a_type a;

   typedef float _e_type;
  _e_type e;

   typedef float _r_type;
  _r_type r;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _config_flags_type;
  _config_flags_type config_flags;





  typedef boost::shared_ptr< ::edo_core_msgs::CartesianPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edo_core_msgs::CartesianPose_<ContainerAllocator> const> ConstPtr;

}; // struct CartesianPose_

typedef ::edo_core_msgs::CartesianPose_<std::allocator<void> > CartesianPose;

typedef boost::shared_ptr< ::edo_core_msgs::CartesianPose > CartesianPosePtr;
typedef boost::shared_ptr< ::edo_core_msgs::CartesianPose const> CartesianPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::edo_core_msgs::CartesianPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::edo_core_msgs::CartesianPose_<ContainerAllocator1> & lhs, const ::edo_core_msgs::CartesianPose_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.a == rhs.a &&
    lhs.e == rhs.e &&
    lhs.r == rhs.r &&
    lhs.config_flags == rhs.config_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::edo_core_msgs::CartesianPose_<ContainerAllocator1> & lhs, const ::edo_core_msgs::CartesianPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace edo_core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::edo_core_msgs::CartesianPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::edo_core_msgs::CartesianPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::edo_core_msgs::CartesianPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c857e23df72836a6dc6b0e43ae3cb23";
  }

  static const char* value(const ::edo_core_msgs::CartesianPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c857e23df72836aULL;
  static const uint64_t static_value2 = 0x6dc6b0e43ae3cb23ULL;
};

template<class ContainerAllocator>
struct DataType< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edo_core_msgs/CartesianPose";
  }

  static const char* value(const ::edo_core_msgs::CartesianPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 a\n"
"float32 e\n"
"float32 r\n"
"string config_flags\n"
;
  }

  static const char* value(const ::edo_core_msgs::CartesianPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.a);
      stream.next(m.e);
      stream.next(m.r);
      stream.next(m.config_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartesianPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edo_core_msgs::CartesianPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::edo_core_msgs::CartesianPose_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "e: ";
    Printer<float>::stream(s, indent + "  ", v.e);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "config_flags: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.config_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EDO_CORE_MSGS_MESSAGE_CARTESIANPOSE_H
