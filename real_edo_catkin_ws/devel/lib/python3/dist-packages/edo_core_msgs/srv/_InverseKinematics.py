# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from edo_core_msgs/InverseKinematicsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import edo_core_msgs.msg

class InverseKinematicsRequest(genpy.Message):
  _md5sum = "248b3f99d2c1f29abd1e4abaa382260d"
  _type = "edo_core_msgs/InverseKinematicsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """edo_core_msgs/CartesianPose cartesian_pose

================================================================================
MSG: edo_core_msgs/CartesianPose
float32 x
float32 y
float32 z
float32 a
float32 e
float32 r
string config_flags
"""
  __slots__ = ['cartesian_pose']
  _slot_types = ['edo_core_msgs/CartesianPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cartesian_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InverseKinematicsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cartesian_pose is None:
        self.cartesian_pose = edo_core_msgs.msg.CartesianPose()
    else:
      self.cartesian_pose = edo_core_msgs.msg.CartesianPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.cartesian_pose.x, _x.cartesian_pose.y, _x.cartesian_pose.z, _x.cartesian_pose.a, _x.cartesian_pose.e, _x.cartesian_pose.r))
      _x = self.cartesian_pose.config_flags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cartesian_pose is None:
        self.cartesian_pose = edo_core_msgs.msg.CartesianPose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.cartesian_pose.x, _x.cartesian_pose.y, _x.cartesian_pose.z, _x.cartesian_pose.a, _x.cartesian_pose.e, _x.cartesian_pose.r,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cartesian_pose.config_flags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cartesian_pose.config_flags = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.cartesian_pose.x, _x.cartesian_pose.y, _x.cartesian_pose.z, _x.cartesian_pose.a, _x.cartesian_pose.e, _x.cartesian_pose.r))
      _x = self.cartesian_pose.config_flags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cartesian_pose is None:
        self.cartesian_pose = edo_core_msgs.msg.CartesianPose()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.cartesian_pose.x, _x.cartesian_pose.y, _x.cartesian_pose.z, _x.cartesian_pose.a, _x.cartesian_pose.e, _x.cartesian_pose.r,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cartesian_pose.config_flags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cartesian_pose.config_flags = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from edo_core_msgs/InverseKinematicsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import edo_core_msgs.msg

class InverseKinematicsResponse(genpy.Message):
  _md5sum = "634608e33427b3da9c8fae849b2bc252"
  _type = "edo_core_msgs/InverseKinematicsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """edo_core_msgs/JointsPositions positions


================================================================================
MSG: edo_core_msgs/JointsPositions
uint64 joints_mask
uint8[] joints_type
float32[] positions
"""
  __slots__ = ['positions']
  _slot_types = ['edo_core_msgs/JointsPositions']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       positions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InverseKinematicsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.positions is None:
        self.positions = edo_core_msgs.msg.JointsPositions()
    else:
      self.positions = edo_core_msgs.msg.JointsPositions()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.positions.joints_mask
      buff.write(_get_struct_Q().pack(_x))
      _x = self.positions.joints_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.positions.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.positions.positions))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.positions is None:
        self.positions = edo_core_msgs.msg.JointsPositions()
      end = 0
      start = end
      end += 8
      (self.positions.joints_mask,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.positions.joints_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.positions.positions = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.positions.joints_mask
      buff.write(_get_struct_Q().pack(_x))
      _x = self.positions.joints_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.positions.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.positions.positions.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.positions is None:
        self.positions = edo_core_msgs.msg.JointsPositions()
      end = 0
      start = end
      end += 8
      (self.positions.joints_mask,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.positions.joints_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.positions.positions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
class InverseKinematics(object):
  _type          = 'edo_core_msgs/InverseKinematics'
  _md5sum = '1c24acd7035fed719a53e12d3c8c16d1'
  _request_class  = InverseKinematicsRequest
  _response_class = InverseKinematicsResponse
