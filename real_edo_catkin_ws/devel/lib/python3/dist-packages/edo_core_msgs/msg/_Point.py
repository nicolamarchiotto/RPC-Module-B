# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from edo_core_msgs/Point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import edo_core_msgs.msg

class Point(genpy.Message):
  _md5sum = "26543d454cca7ceed4ebc194450e80d4"
  _type = "edo_core_msgs/Point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 data_type
edo_core_msgs/CartesianPose cartesian_data
uint64 joints_mask
float32[] joints_data
================================================================================
MSG: edo_core_msgs/CartesianPose
float32 x
float32 y
float32 z
float32 a
float32 e
float32 r
string config_flags
"""
  __slots__ = ['data_type','cartesian_data','joints_mask','joints_data']
  _slot_types = ['uint8','edo_core_msgs/CartesianPose','uint64','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data_type,cartesian_data,joints_mask,joints_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data_type is None:
        self.data_type = 0
      if self.cartesian_data is None:
        self.cartesian_data = edo_core_msgs.msg.CartesianPose()
      if self.joints_mask is None:
        self.joints_mask = 0
      if self.joints_data is None:
        self.joints_data = []
    else:
      self.data_type = 0
      self.cartesian_data = edo_core_msgs.msg.CartesianPose()
      self.joints_mask = 0
      self.joints_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B6f().pack(_x.data_type, _x.cartesian_data.x, _x.cartesian_data.y, _x.cartesian_data.z, _x.cartesian_data.a, _x.cartesian_data.e, _x.cartesian_data.r))
      _x = self.cartesian_data.config_flags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joints_mask
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.joints_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.joints_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cartesian_data is None:
        self.cartesian_data = edo_core_msgs.msg.CartesianPose()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.data_type, _x.cartesian_data.x, _x.cartesian_data.y, _x.cartesian_data.z, _x.cartesian_data.a, _x.cartesian_data.e, _x.cartesian_data.r,) = _get_struct_B6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cartesian_data.config_flags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cartesian_data.config_flags = str[start:end]
      start = end
      end += 8
      (self.joints_mask,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joints_data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B6f().pack(_x.data_type, _x.cartesian_data.x, _x.cartesian_data.y, _x.cartesian_data.z, _x.cartesian_data.a, _x.cartesian_data.e, _x.cartesian_data.r))
      _x = self.cartesian_data.config_flags
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joints_mask
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.joints_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.joints_data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cartesian_data is None:
        self.cartesian_data = edo_core_msgs.msg.CartesianPose()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.data_type, _x.cartesian_data.x, _x.cartesian_data.y, _x.cartesian_data.z, _x.cartesian_data.a, _x.cartesian_data.e, _x.cartesian_data.r,) = _get_struct_B6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cartesian_data.config_flags = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cartesian_data.config_flags = str[start:end]
      start = end
      end += 8
      (self.joints_mask,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joints_data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6f = None
def _get_struct_B6f():
    global _struct_B6f
    if _struct_B6f is None:
        _struct_B6f = struct.Struct("<B6f")
    return _struct_B6f
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
