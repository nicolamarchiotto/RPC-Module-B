# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from edo_core_msgs/JointConfiguration.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointConfiguration(genpy.Message):
  _md5sum = "53d67f707da52f98419b61a5961787e9"
  _type = "edo_core_msgs/JointConfiguration"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 kp
float32 ti
float32 td
float32 sat
float32 kff
float32 max
float32 kpv
float32 tiv
float32 tdv
float32 satv
float32 kffv
float32 maxv
float32 kpt
float32 tit
float32 tdt
float32 satt
float32 kfft
float32 maxt
float32 kt
"""
  __slots__ = ['kp','ti','td','sat','kff','max','kpv','tiv','tdv','satv','kffv','maxv','kpt','tit','tdt','satt','kfft','maxt','kt']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kp,ti,td,sat,kff,max,kpv,tiv,tdv,satv,kffv,maxv,kpt,tit,tdt,satt,kfft,maxt,kt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointConfiguration, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.kp is None:
        self.kp = 0.
      if self.ti is None:
        self.ti = 0.
      if self.td is None:
        self.td = 0.
      if self.sat is None:
        self.sat = 0.
      if self.kff is None:
        self.kff = 0.
      if self.max is None:
        self.max = 0.
      if self.kpv is None:
        self.kpv = 0.
      if self.tiv is None:
        self.tiv = 0.
      if self.tdv is None:
        self.tdv = 0.
      if self.satv is None:
        self.satv = 0.
      if self.kffv is None:
        self.kffv = 0.
      if self.maxv is None:
        self.maxv = 0.
      if self.kpt is None:
        self.kpt = 0.
      if self.tit is None:
        self.tit = 0.
      if self.tdt is None:
        self.tdt = 0.
      if self.satt is None:
        self.satt = 0.
      if self.kfft is None:
        self.kfft = 0.
      if self.maxt is None:
        self.maxt = 0.
      if self.kt is None:
        self.kt = 0.
    else:
      self.kp = 0.
      self.ti = 0.
      self.td = 0.
      self.sat = 0.
      self.kff = 0.
      self.max = 0.
      self.kpv = 0.
      self.tiv = 0.
      self.tdv = 0.
      self.satv = 0.
      self.kffv = 0.
      self.maxv = 0.
      self.kpt = 0.
      self.tit = 0.
      self.tdt = 0.
      self.satt = 0.
      self.kfft = 0.
      self.maxt = 0.
      self.kt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_19f().pack(_x.kp, _x.ti, _x.td, _x.sat, _x.kff, _x.max, _x.kpv, _x.tiv, _x.tdv, _x.satv, _x.kffv, _x.maxv, _x.kpt, _x.tit, _x.tdt, _x.satt, _x.kfft, _x.maxt, _x.kt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.kp, _x.ti, _x.td, _x.sat, _x.kff, _x.max, _x.kpv, _x.tiv, _x.tdv, _x.satv, _x.kffv, _x.maxv, _x.kpt, _x.tit, _x.tdt, _x.satt, _x.kfft, _x.maxt, _x.kt,) = _get_struct_19f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_19f().pack(_x.kp, _x.ti, _x.td, _x.sat, _x.kff, _x.max, _x.kpv, _x.tiv, _x.tdv, _x.satv, _x.kffv, _x.maxv, _x.kpt, _x.tit, _x.tdt, _x.satt, _x.kfft, _x.maxt, _x.kt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.kp, _x.ti, _x.td, _x.sat, _x.kff, _x.max, _x.kpv, _x.tiv, _x.tdv, _x.satv, _x.kffv, _x.maxv, _x.kpt, _x.tit, _x.tdt, _x.satt, _x.kfft, _x.maxt, _x.kt,) = _get_struct_19f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19f = None
def _get_struct_19f():
    global _struct_19f
    if _struct_19f is None:
        _struct_19f = struct.Struct("<19f")
    return _struct_19f
